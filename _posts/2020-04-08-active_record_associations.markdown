---
layout: post
title:      "Active Record Associations"
date:       2020-04-08 05:22:03 +0000
permalink:  active_record_associations
---


I'll start off by explaing in my own words what an association is and how it can be useful.  Associations are helper that you can use in rails to define the relationship from one model to another. If rails was a magician the association would be the "Abracadabra" that initates some magic.  There are six types of associations rails uses but I'm only gonna talk about the three that I used on my Rails project, which are the **belongs_to, has_many and has_many :through** associations.  The belongs_to association sets up a one on one connection. When using the belongs_to, you are saying every time you create an instance of that model there is a relationship to a parent model. They are identified using the id of the parent model and a column that represents that model in the other model.  For example artwork would belong to a gallery, so in the artworks table there be a column name **gallery_id** and you would declare this in your artworks model like this **belongs_to :gallery** which you can also declare in your artworks migration. My next is the has_many association which sets up a one to many relationship. This association is usually the flip side of the belongs_to association.  This is saying that  each instance of this model either as zero or more of another model. Using the gallery example In the parent model you would declare this like **has_many :artworks**. This is not declared in the migration and the name must be pluralized. The last association I'm gonna mention is the has_many :through which sets up the many to many relationship with another model through a thrid model and is also useful setting shortcuts for nested has_many associations.  Using the same gallery example, we would create a comment model that belongs_to the artwork model and the gallery model will have many comments through the artworks. This would get declared in the gallery model like this, **has_many :comments, through: :comments**. If you noticed the through comments is a key:value pair. As soon as you ccreate these association, you have access to an abundant amount of methods that you wouldn't have without it.  Some associations even use a model object as method, that's why naming conventions are very important when using associations.  You want to make sure that the names you use are not methods used in Active Record. Using associations also makes manipulating info for nested model controllers and views more simple and less D.R.Y.
